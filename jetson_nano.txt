

1. 首先安装亚克力支架等。
下载SD卡镜像
https://developer.nvidia.com/embedded/downloads
迅雷下载看运气吧


下面这个办法其实也可以，但是非常慢。
wget https://developer.download.nvidia.com/embedded/L4T/r32_Release_v5.1/r32_Release_v5.1/Jeston_Nano/jetson-nano-jp451-sd-card-image.zip
可能加cookie才能保证连接




2. SD卡刷系统
用etcher把解压后的镜像刷进SD卡，这里是64G的SD卡。
然后把J48挑帽接上，接上USB键盘和USB鼠标，5VDV供电。根据提示释放系统到SD卡。
其中选择自动登录桌面


tips:更换成国内源
http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/
https://mirrors.aliyun.com/ubuntu-ports/
sudo apt update
sudo apt upgrade


3. Jetson Nano 摄像头测试

方法1
目标板桌面terminal或者ssh输入指令：
$  nvgstcapture

方法2
目标板桌面terminal输入指令：
 $ gst-launch-1.0 nvarguscamerasrc ! 'video/x-raw(memory:NVMM),width=3820, height=2464, framerate=21/1, format=NV12' ! nvvidconv flip-method=0 ! 'video/x-raw,width=960, height=616' ! nvvidconv ! nvegltransform ! nveglglessink -e

单独测摄像头0或1,修改sensor_id=0或sensor_id=1
gst-launch-1.0 nvarguscamerasrc sensor_id=0 ! \
   'video/x-raw(memory:NVMM),width=3280, height=2464, framerate=21/1, format=NV12' ! \
   nvvidconv flip-method=0 ! 'video/x-raw,width=960, height=720' ! \
   nvvidconv ! nvegltransform ! nveglglessink -e

方法3
https://github.com/JetsonHacksNano/CSI-Camera/

cd CSI-Camera
g++ -std=c++11 -Wall -I/usr/include/opencv4 simple_camera.cpp -L/usr/lib -lopencv_core -lopencv_highgui -lopencv_videoio -o simple_camera

Failed to load module "canberra-gtk-module"
sudo apt-get install libcanberra-gtk-module

用这个测双目摄像头硬件很方便啊








4. 远程控制(串口/SSH/VNC)
官网start文档有USB线直接在主机引入一个com口的

主机连接板子的USB串口(并不好用)
sudo screen /dev/ttyACM0 115200

我这可以接屏幕，就在目标板桌面连接wifi好了
sudo apt update


tips：如果
Could not get lock /var/lib/apt/lists/lock - open (11: Resource temporarily unavailable)
解决办法
sudo rm /var/lib/apt/lists/lock


目标板桌面通过wifi连接到内网后
ifconfig -a找到wifi的ip
主机通过SSH登录目标板


VNC配置
sudo apt update
sudo apt install vino        （现在不叫vino-server了）
mkdir -p ~/.config/autostart
cp /usr/share/applications/vino-server.desktop ~/.config/autostart
gsettings set org.gnome.Vino prompt-enabled false
gsettings set org.gnome.Vino require-encryption false
gsettings set org.gnome.Vino authentication-methods "['vnc']"
gsettings set org.gnome.Vino vnc-password $(echo -n '123456'|base64)
sudo vim /usr/share/glib-2.0/schemas/org.gnome.Vino.gschema.xml

在</schema>之前插入
<key name='enabled' type='b'>
      <summary>Enable remote access to the desktop</summary>
      <description>
        If true, allows remote access to the desktop via the RFB
        protocol. Users on remote machines may then connect to the
        desktop using a VNC viewer.
      </description>
      <default>false</default>
    </key>

如果前面释放SD卡系统的时候选了密码登录而不是自动登录，现在要改成自动登录
System Settings的账户设置成自动login（右上的unlock先）

sudo reboot

VNC分辨率如果有问题，就修改。
To use a different resolution, edit /etc/X11/xorg.conf and append the following lines:

Section "Screen"
   Identifier    "Default Screen"
   Monitor       "Configured Monitor"
   Device        "Tegra0"
   SubSection "Display"
       Depth    24
       Virtual 1280 800 # Modify the resolution by editing these values
   EndSubSection
EndSection

或者在运行vino之前，xrandr --fb 1280x1024


也可以自己设置 启动应用程序
名称 vino-server
命令 /home/xxx/openvino
注释 vino-server

先删~/.config/autostart/vino-server.desktop
gedit ~/openvino

#!/bin/bash
export DISPLAY=:0
gsettings set org.gnome.Vino enabled true
gsettings set org.gnome.Vino prompt-enabled false
gsettings set org.gnome.Vino require-encryption false
xrandr --fb 1280x1024
/usr/lib/vino/vino-server --sm-disable &


chmod +x ~/openvino

参考网址：
https://wiki.archlinux.org/index.php/Vino#Alternative_Desktop_Environments
https://help.ubuntu.com/community/VNC/Servers







5. 安装其他一些工具

安装个iptux
安装个aptitude
sudo apt install cmake-gui libopencv-dev
sudo apt install python3-pip python-pip
pip3 list
sudo -H pip3 install --upgrade pip -i https://mirrors.163.com/pypi/simple
sudo -H pip3 install numpy==1.19.5 -i https://mirrors.163.com/pypi/simple
sudo -H pip3 install opencv-python==4.5.1.48 -i https://mirrors.163.com/pypi/simple
ModuleNotFoundError: No module named ‘skbuild’
sudo -H pip3 install scikit-build -i https://mirrors.163.com/pypi/simple
sudo -H pip3 install cmake -i https://mirrors.163.com/pypi/simple
//sudo -H pip3 install scipy -i https://mirrors.163.com/pypi/simple
##sudo -H pip3 install matplotlib -i https://mirrors.163.com/pypi/simple
##sudo -H pip3 install scikit-learn -i https://mirrors.163.com/pypi/simple
//pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple cmake

sudo -H /usr/bin/python3 -m pip install --upgrade pip
sudo -H /usr/bin/python3 -m pip install --upgrade setuptools
sudo -H pip3 install testresources  -i https://mirrors.163.com/pypi/simple
//pip install --upgrade pip -vvv

sudo apt install mlocate
sudo updatedb

sudo apt-get install libcanberra-gtk-module



sudo apt install fcitx-googlepinyin fcitx fcitx-bin fcitx-data fcitx-modules fcitx-googlepinyin fcitx-config-gtk fcitx-frontend-gtk2 fcitx-ui-classic fcitx-module-dbus
sudo im-config
需要重启板子在tray里面设置添加googlepinyin


sudo apt install parcellite
cp /usr/share/applications/parcellite.desktop /home/andy/.config/autostart/



把～/.ssh打包通过scp推到目标板，这样可以git://


设置PC的pycharm远程连接目标板
需要安装professional版本，试用就好

新建project时候
设置解释器为目标板的解释器
然后在settings-->Project...-->Python Interpreter下拉选show all编辑框设置sudo



sudo apt install p7zip p7zip-full p7zip-rar unace unrar zip unzip p7zip-full p7zip-rar sharutils uudeview mpack jlha-utils arj cabextract file-roller xz-utils



目标板上也可以安装pycharm
https://www.jetbrains.com/pycharm/download/




sudo apt install i2c-tools libi2c-dev 
查看有机组i2c adapter
andy@andy-desktop:~/Downloads$ i2cdetect -l
i2c-3	i2c       	7000c700.i2c                    	I2C adapter
i2c-1	i2c       	7000c400.i2c                    	I2C adapter
i2c-8	i2c       	i2c-6-mux (chan_id 1)           	I2C adapter
i2c-6	i2c       	Tegra I2C adapter               	I2C adapter
i2c-4	i2c       	7000d000.i2c                    	I2C adapter
i2c-2	i2c       	7000c500.i2c                    	I2C adapter
i2c-0	i2c       	7000c000.i2c                    	I2C adapter
i2c-7	i2c       	i2c-6-mux (chan_id 0)           	I2C adapter
i2c-5	i2c       	7000d100.i2c                    	I2C adapter

查看总线上器件
andy@andy-desktop:~/Downloads$ i2cdetect -r -y 2
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00:          -- -- -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
50: 50 -- -- -- -- -- -- 57 -- -- -- -- -- -- -- -- 
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
70: -- -- -- -- -- -- -- --  

查看某设备所有寄存器的值
andy@andy-desktop:~/Downloads$ i2cdump -f -y 2 0x50
No size specified (using byte-data access)
     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f    0123456789abcdef
00: 01 00 fc 00 78 0d 00 00 04 46 00 00 00 00 00 00    ?.?.x?..?F......
10: 00 00 00 00 36 39 39 2d 31 33 34 34 38 2d 30 30    ....699-13448-00
20: 30 30 2d 34 30 30 20 46 2e 30 00 00 00 00 00 00    00-400 F.0......
30: 00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff    ................
40: ff ff ff ff 84 40 ec 4b 04 00 31 34 32 34 37 32    ....?@?K?.142472
50: 30 30 36 38 32 35 30 00 00 00 00 00 00 00 00 00    0068250.........
60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
90: 00 00 00 00 00 00 4e 56 43 42 1c 00 4d 31 00 00    ......NVCB?.M1..
a0: ff ff ff ff ff ff ff ff ff ff ff ff 84 40 ec 4b    ............?@?K
b0: 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ?...............
c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 33    ...............3




查看主板上的PCI插槽
sudo dmidecode | grep --color "PCI"

lspci -tv







